// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  password  String
  firstName String
  lastName  String

  role Role[] @default([Customer])

  customerProfile   CustomerProfile?
  courierProfile    CourierProfile?
  restaurantProfile RestaurantProfile?

  hashedRefreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address    Address?
  Restaurant Restaurant[]
}

enum Role {
  Admin
  Customer
  Restaurant
  Courier
}

enum ApprovalStatus {
  Pending
  Approved
  Rejected
}

model CourierProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  city           String
  vehicle        VehicleType
  language       Language       @default(Czech)
  status         CourierStatus  @default(Offline)
  approvalStatus ApprovalStatus @default(Pending)
  dateBirth      DateTime

  deliveries Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum VehicleType {
  Bicycle
  ElectricBicycle
  Car
  ElectricScooter
}

enum Language {
  Czech
  Slovak
  English
  German
}

model RestaurantProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  city           String
  approvalStatus ApprovalStatus @default(Pending)

  restaurants Restaurant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model CustomerProfile {
  id     String  @id @default(uuid())
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id])
  orders Order[]
}

enum CourierStatus {
  Available
  Busy
  Offline
}

model Restaurant {
  id          String           @id @default(uuid())
  name        String
  description String?
  address     Address?
  phone       String
  ownerId     String
  status      RestaurantStatus @default(Pending)
  owner       User             @relation(fields: [ownerId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    Category[]

  menuItems           MenuItem[]
  orders              Order[]
  RestaurantProfile   RestaurantProfile? @relation(fields: [restaurantProfileId], references: [id])
  restaurantProfileId String?
}

enum Category {
  Burger
  Kuřecí
  Pizza
  Čína
  Snídaně
  Sushi
  Salát
  Sladké
  Slané
}

enum RestaurantStatus {
  Pending
  Approved
  Rejected
}

model MenuItem {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float
  available   Boolean @default(true)
  imageUrl    String?

  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
}

model Order {
  id        String      @id @default(uuid())
  status    OrderStatus @default(Pending)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  orderItems        OrderItem[]
  CourierProfile    CourierProfile?  @relation(fields: [courierProfileId], references: [id])
  courierProfileId  String?
  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  customerProfileId String?
}

enum OrderStatus {
  Pending
  Accepted
  Preparing
  OutForDelivery
  Delivered
  Cancelled
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model Address {
  id      String  @id @default(uuid())
  street  String
  city    City
  zipCode String?
  country Country @default(Czechia)

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  restaurantId String?     @unique
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
}

enum Country {
  Czechia
}

enum City {
  Zlín
  Praha
  Brno
}
