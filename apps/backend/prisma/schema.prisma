// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(Customer)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address    Address?
  orders     Order[]      @relation("CustomerOrders")
  deliveries Order[]      @relation("CourierDeliveries")
  Restaurant Restaurant[]
}

enum Role {
  Admin
  Restaurant
  Courier
  Customer
}

model Restaurant {
  id          String   @id @default(uuid())
  name        String
  description String?
  address     Address?
  phone       String
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menuItems MenuItem[]
  orders    Order[]
}

model MenuItem {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float
  available   Boolean @default(true)
  imageUrl    String?

  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
}

model Order {
  id        String      @id @default(uuid())
  status    OrderStatus @default(Pending)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  customerId String
  customer   User   @relation("CustomerOrders", fields: [customerId], references: [id])

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  courierId String?
  courier   User?   @relation("CourierDeliveries", fields: [courierId], references: [id])

  orderItems OrderItem[]
}

enum OrderStatus {
  Pending
  Accepted
  Preparing
  OutForDelivery
  Delivered
  Cancelled
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model Address {
  id      String @id @default(uuid())
  street  String
  city    String
  zipCode String
  country String

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  restaurantId String?     @unique
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
}
